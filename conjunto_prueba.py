import networkx as nx
import numpy as np
import os

from growing_neural_gas import GNG
import utils

# chose sequence to analyze:
from video_sequences.sponge_center import polygon_sequence


if __name__ == "__main__":
    MAX_NODES = 47
    NUM_ITERATIONS_FIRST_MODEL = 5000
    NUM_ITERATIONS_NEXT_MODELS = 301
    START_INDEX_POLYGON = 2
    OUTPUT_NAME = "sponge_shortside"

    time_id: str = utils.time_id()
    output_images_dir = f"output/images"
    #output_gif_file = f"output/{OUTPUT_NAME}_{time_id}/sequence.gif"
    try:
        os.makedirs(f"./output/images")
    except:
        print("Already exists")
    polygon_points = np.load("frame_pixels.npy")

    contour = [[511, 242], [559, 243], [564, 243], [570, 243], [687, 243], [694, 243], [733, 243], [575, 244], [580, 244], [495, 245], [500, 245], [505, 245], [515, 245], [520, 245], [525, 245], [530, 245], [535, 245], [540, 245], [545, 245], [550, 245], [585, 245], [657, 245], [699, 245], [704, 245], [709, 245], [715, 245], [720, 245], [725, 245], [591, 246], [680, 246], [596, 247], [609, 247], [662, 247], [667, 247], [675, 247], [604, 248], [646, 248], [651, 248], [732, 248], [640, 249], [495, 250], [612, 251], [607, 252], [617, 252], [633, 252], [622, 253], [732, 253], [627, 254], [639, 254], [495, 255], [732, 258], [496, 260], [732, 263], [497, 265], [732, 268], [496, 270], [736, 271], [731, 273], [496, 275], [735, 276], [731, 279], [496, 280], [735, 282], [493, 284], [731, 285], [497, 287], [735, 288], [497, 292], [731, 292], [735, 295], [495, 297], [732, 299], [492, 301], [736, 302], [731, 304], [492, 306], [735, 307], [731, 310], [491, 311], [735, 313], [491, 316], [731, 316], [735, 319], [491, 321], [731, 322], [735, 325], [491, 326], [733, 330], [491, 331], [736, 334], [731, 335], [491, 336], [734, 339], [491, 341], [732, 344], [491, 346], [736, 347], [491, 351], [733, 351], [736, 355], [492, 356], [733, 359], [490, 361], [732, 364], [490, 366], [735, 368], [493, 370], [731, 371], [490, 374], [734, 375], [493, 378], [730, 378], [490, 382], [733, 382], [729, 386], [490, 387], [732, 390], [490, 392], [728, 393], [490, 397], [728, 398], [493, 401], [731, 402], [491, 406], [728, 406], [731, 410], [491, 411], [727, 413], [494, 415], [731, 416], [491, 419], [727, 419], [731, 422], [494, 423], [727, 425], [491, 427], [730, 429], [494, 431], [726, 432], [730, 435], [492, 436], [726, 438], [493, 441], [729, 442], [492, 446], [725, 446], [729, 449], [492, 451], [725, 452], [495, 455], [729, 456], [725, 459], [493, 460], [728, 463], [493, 465], [725, 467], [493, 470], [728, 471], [724, 474], [493, 475], [727, 478], [496, 479], [724, 482], [493, 484], [727, 486], [496, 488], [724, 490], [493, 493], [727, 494], [496, 497], [723, 497], [727, 500], [493, 501], [496, 505], [724, 505], [728, 508], [493, 509], [725, 512], [493, 514], [728, 516], [496, 518], [725, 520], [493, 522], [729, 523], [496, 526], [725, 526], [729, 529], [493, 530], [725, 532], [496, 534], [729, 535], [493, 538], [726, 539], [496, 542], [729, 543], [493, 546], [726, 547], [496, 550], [730, 550], [493, 554], [727, 554], [496, 558], [730, 558], [727, 562], [495, 563], [730, 566], [495, 568], [727, 570], [495, 573], [730, 574], [494, 578], [727, 578], [497, 582], [727, 583], [493, 585], [727, 588], [496, 589], [726, 593], [494, 594], [729, 597], [492, 599], [726, 601], [495, 603], [725, 606], [492, 607], [496, 610], [728, 610], [492, 613], [724, 613], [727, 617], [491, 618], [495, 621], [501, 621], [507, 621], [512, 621], [724, 621], [518, 622], [581, 622], [586, 622], [591, 622], [596, 622], [601, 622], [606, 622], [490, 623], [523, 623], [528, 623], [533, 623], [538, 623], [543, 623], [548, 623], [553, 623], [558, 623], [563, 623], [568, 623], [573, 623], [611, 623], [616, 623], [621, 624], [626, 624], [631, 624], [636, 625], [641, 625], [647, 625], [577, 626], [652, 626], [657, 626], [662, 626], [667, 626], [672, 626], [677, 626], [682, 626], [687, 626], [692, 626], [711, 626], [716, 626], [721, 626], [726, 626], [697, 627], [702, 627], [707, 629]]

    polygon_points = np.array(contour)

    # First GNG is trained
    first_GNG = GNG(max_nodes=MAX_NODES)
    train_G = utils.create_polygon_graph(polygon_points)
    first_GNG.train(
        train_G,
        max_iterations=NUM_ITERATIONS_FIRST_MODEL,
        output_images_dir=output_images_dir,
        image_title=f"Polygon #{START_INDEX_POLYGON+1}",
        png_prefix=str(START_INDEX_POLYGON) + "_",
    )
    new_polygon_sequence = [utils.dict_to_list(nx.get_node_attributes(first_GNG.graph, "pos"))]
    import ipdb;ipdb.set_trace();

    if len(new_polygon_sequence[0]) < MAX_NODES:
        raise Exception("Maximum number of nodes was not reached. Needs more training time")

    exit()
    np.save("contour_test.npy", np.array(new_polygon_sequence))